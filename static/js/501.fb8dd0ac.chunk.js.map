{"version":3,"file":"static/js/501.fb8dd0ac.chunk.js","mappings":"uPAIaA,EAAUC,EAAAA,GAAAA,IAAH,4CAGPC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,yMAQS,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,UAAnB,IAGpBC,EAAQP,EAAAA,GAAAA,MAAH,4MAMM,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOG,SAAnB,IACD,SAAAL,GAAC,OAAIA,EAAEC,MAAMC,OAAOI,UAAnB,IAKZC,EAAOV,EAAAA,GAAAA,EAAH,+CAIJW,GAAaX,EAAAA,EAAAA,IAAOY,EAAAA,GAAPZ,CAAH,0FACZ,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOQ,YAAnB,IAMCC,GAAcd,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAH,2DACb,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOQ,YAAnB,I,kDC5BNG,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,sCACPC,IAAI,GAAI,sCACRC,QACC,iSACA,gEAEDC,SAAS,uBACZC,MAAOP,EAAAA,KACJO,MAAM,mDACNF,QACC,mDACA,iIAEDC,SAAS,wBACZE,SAAUR,EAAAA,KACPG,IAAI,EAAG,2CACPC,IAAI,KACJE,SAAS,6BAGDG,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC7B,EAAD,WACE,SAAC,KAAD,CACE8B,cAAe,CACbV,KAAM,GACNK,MAAO,GACPC,SAAU,IAEZK,iBAAkBd,EAClBe,SAAU,SAACC,EAAQC,GACjBC,QAAQC,IAAIH,GACZL,GAASS,EAAAA,EAAAA,IAASJ,IAClBC,EAAQI,WACT,EAXH,UAaE,UAACpC,EAAD,YACE,UAACM,EAAD,WAAO,QAEL,SAAC,KAAD,CAAOY,KAAK,OAAOmB,KAAK,UACxB,SAACxB,EAAD,CAAaK,KAAK,OAAOoB,UAAU,YAErC,UAAChC,EAAD,WAAO,SAEL,SAAC,KAAD,CAAOY,KAAK,QAAQmB,KAAK,WACzB,SAACxB,EAAD,CAAaK,KAAK,QAAQoB,UAAU,YAGtC,UAAChC,EAAD,WAAO,YAEL,SAAC,KAAD,CAAOY,KAAK,WAAWmB,KAAK,cAC5B,SAACxB,EAAD,CAAaK,KAAK,WAAWoB,UAAU,YAGzC,SAACC,EAAA,EAAD,CAAQF,KAAK,SAAb,SAAsB,cACtB,UAAC5B,EAAD,WAAM,2BACqB,KACzB,SAACC,EAAD,CAAY8B,GAAI,SAAhB,SAA0B,qBAMrC,EC/EYC,EAAU1C,EAAAA,GAAAA,QAAH,wEAEE,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,OAAOsC,WAAnB,ICUvB,EAViB,WACf,OACE,SAACD,EAAD,WACE,SAAC,IAAD,WACE,SAAChB,EAAD,OAIP,C","sources":["Components/RegisterForm/RegisterForm.styled.js","Components/RegisterForm/RegisterForm.jsx","Pages/Register/Register.styled.js","Pages/Register/Register.js"],"sourcesContent":["import { Form, ErrorMessage } from 'formik';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 50px 0;\n`;\nexport const StyledForm = styled(Form)`\n  margin: 0 auto;\n  padding: 35px;\n  max-width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  border-radius: 10px;\n  box-shadow: 0px 2px 5px 0px ${p => p.theme.colors.secondBckg};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  & > input {\n    height: 50px;\n    background-color: ${p => p.theme.colors.lightBckg};\n    border: 1px solid ${p => p.theme.colors.accentText};\n    border-radius: 10px;\n  }\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n`;\n\nexport const StyledLink = styled(Link)`\n  color: ${p => p.theme.colors.subTitleText};\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.subTitleText};\n  font-size: 16px;\n`;\n","import { Formik, Field } from 'formik';\nimport {\n  StyledForm,\n  StyledError,\n  Label,\n  Wrapper,\n  Text,\n  StyledLink,\n} from './RegisterForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Button } from 'Components/Button/Button';\n\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Name must be at least 3 characters')\n    .max(50, 'Name must be at most 50 characters')\n    .matches(\n      /^(?:(?!^\\s+$)[\\sa-zA-Zа-яА-ЯґҐєЄіІїЇ]+((['-][\\sa-zA-Zа-яА-ЯґҐєЄіІїЇ]+)([ ]?[\\sa-zA-Zа-яА-ЯґҐєЄіІїЇ]+))*)?$/,\n      'Name may only contain letters, dashes, apostrophes or spaces'\n    )\n    .required('Name is a required!'),\n  email: Yup.string()\n    .email('Invalid email address. The @ symbol is required')\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      'Please enter a valid email address. Only alphanumeric characters, underscores, periods, hyphens, and the @ symbol are allowed'\n    )\n    .required('Email is a required!'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters.')\n    .max(255)\n    .required('Password is a required!'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={RegisterSchema}\n        onSubmit={(values, actions) => {\n          console.log(values);\n          dispatch(register(values));\n          actions.resetForm();\n        }}\n      >\n        <StyledForm>\n          <Label>\n            Name\n            <Field name=\"name\" type=\"text\" />\n            <StyledError name=\"name\" component=\"div\" />\n          </Label>\n          <Label>\n            Email\n            <Field name=\"email\" type=\"email\" />\n            <StyledError name=\"email\" component=\"div\" />\n          </Label>\n\n          <Label>\n            Password\n            <Field name=\"password\" type=\"password\" />\n            <StyledError name=\"password\" component=\"div\" />\n          </Label>\n\n          <Button type=\"submit\">Register</Button>\n          <Text>\n            Already have an account?{' '}\n            <StyledLink to={'/login'}>Sign in</StyledLink>\n          </Text>\n        </StyledForm>\n      </Formik>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-top: 50px;\n  background-color: ${p => p.theme.colors.primaryBckg};\n`;\n","import { Container } from 'Components/Container.styled';\nimport { RegisterForm } from 'Components/RegisterForm/RegisterForm';\nimport { Section } from './Register.styled';\n\nconst Register = () => {\n  return (\n    <Section>\n      <Container>\n        <RegisterForm />\n      </Container>\n    </Section>\n  );\n};\n\nexport default Register;\n"],"names":["Wrapper","styled","StyledForm","Form","p","theme","colors","secondBckg","Label","lightBckg","accentText","Text","StyledLink","Link","subTitleText","StyledError","ErrorMessage","RegisterSchema","Yup","shape","name","min","max","matches","required","email","password","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","console","log","register","resetForm","type","component","Button","to","Section","primaryBckg"],"sourceRoot":""}